{"version":3,"file":"generated.js","sources":["node_modules/browser-pack/_prelude.js","src/auth.js","src/channels.js","src/index.js","src/messages.js","src/status_code.js","src/users.js","src/utils.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","Auth","uri","credentials","this","apiUri","client_id","client_secret","teams","utils","statusCode","instance","proto","prototype","execute","teamName","callback","self","team","now","Date","getTime","expires","_auth","err","getToken","token","cb","request","XMLHttpRequest","open","setRequestHeader","onload","data","JSON","parse","responseText","status","OK","NOT_MODIFIED","access_token","setTime","expires_in","message","onerror","SERVER_ERROR","statusText","send","serializeObject","grant_type","team_name","Channels","auth","getAll","exec","error","channels","map","c","id","type","display_name","name","getMembers","channelId","limit","url","toString","resolve","resolver","document","createElement","href","origin","Api","messages","users","initialize","opts","icon_url","username","window","zbox","Messages","iconUrl","MAX_LENGTH","prepare","text","channelName","payload","channel","BAD_REQUEST","stringify","sendEphemeral","userId","Users","Object","keys","key","user","email","nickname","first_name","last_name","locale","roles","filter","getStatuses","usersIds","Array","isArray","arrError","obj","query","hasOwnProperty","encodeURIComponent","slice"],"mappings":"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","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Created by enahum on 3/1/16.\n */\nvar utils = require('./utils');\nvar statusCode = require('./status_code');\n\nvar instance = null;\n\nfunction Auth(uri, credentials) {\n    this.apiUri = uri;\n    this.client_id = credentials.client_id;\n    this.client_secret = credentials.client_secret;\n    this.teams = {};\n}\n\nvar proto = Auth.prototype;\n\nproto.execute = function(teamName, callback) {\n    var self = this;\n    var team = self.teams[teamName];\n    var now = new Date();\n    if (team && now.getTime() < team.expires) {\n        return callback.call(self);\n    }\n    return self._auth(teamName, function(err) {\n        if (err) {\n            return callback.call(self, err);\n        }\n\n        return callback.call(self);\n    });\n};\n\nproto.getToken = function(teamName) {\n    return this.teams[teamName].token;\n};\n\nproto._auth = function(teamName, callback) {\n    var self = this;\n    var cb = null;\n    var request = new XMLHttpRequest();\n\n    if (callback && typeof callback === 'function') {\n        cb = callback;\n    }\n\n    request.open('POST', self.apiUri + '/oauth/client_token', true);\n    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n\n    request.onload = function() {\n        var err;\n        var data = JSON.parse(request.responseText);\n        var now = new Date();\n        if (request.status === statusCode.OK || request.status === statusCode.NOT_MODIFIED) {\n            self.teams[teamName] = {\n                token: data.access_token,\n                expires: now.setTime(now.getTime() + data.expires_in)\n            };\n\n            if (cb) {\n                return cb.call(null, null, data);\n            }\n        } else {\n            err = {\n                status: request.status,\n                message: data.message\n            };\n\n            if (cb) {\n                return cb.call(null, err);\n            }\n        }\n\n        return data;\n    };\n\n    request.onerror = function() {\n        var err = {\n            status: statusCode.SERVER_ERROR,\n            message: request.statusText\n        };\n\n        if (cb) {\n            return cb.call(null, err);\n        }\n\n        return err;\n    };\n\n    request.send(utils.serializeObject({\n        grant_type: 'client_credentials',\n        client_id: self.client_id,\n        client_secret: self.client_secret,\n        team_name: teamName\n    }));\n};\n\nmodule.exports = function(uri, credentials) {\n    if (instance) {\n        return instance;\n    }\n\n    if (!uri) {\n        throw new Error('API uri must be set');\n    } else if (!credentials.client_id) {\n        throw new Error('options must include client_id');\n    } else if (!credentials.client_secret) {\n        throw new Error('options must include client_secret');\n    }\n    instance = new Auth(uri, credentials);\n    return instance;\n};\n","/**\n * Created by enahum on 3/1/16.\n */\nvar auth = require('./auth');\nvar statusCode = require('./status_code');\n\nvar instance = null;\n\nfunction Channels(uri) {\n    this.apiUri = uri;\n    this.auth = auth();\n}\n\nvar proto = Channels.prototype;\n\nproto.getAll = function(teamName, callback) {\n    var self = this;\n    var cb = null;\n\n    var exec = function(error) {\n        var request = new XMLHttpRequest();\n\n        if (error) {\n            if (cb) {\n                return cb.call(null, error);\n            }\n\n            return error;\n        }\n\n        request.open('GET', self.apiUri + '/api/v1/channels/all', true);\n        request.setRequestHeader('Content-Type', 'application/json');\n        request.setRequestHeader('Authorization', 'Bearer:' + self.auth.getToken(teamName));\n\n        request.onload = function() {\n            var err;\n            var channels;\n            var data = JSON.parse(request.responseText);\n\n            if (request.status === statusCode.OK || request.status === statusCode.NOT_MODIFIED) {\n                channels = data.channels.map(function(c) {\n                    return {\n                        id: c.id,\n                        type: c.type === 'O' ? 'channel' : 'group',\n                        display_name: c.display_name,\n                        name: c.name\n                    };\n                });\n\n                if (cb) {\n                    return cb.call(null, null, channels);\n                }\n            } else {\n                err = {\n                    status: request.status,\n                    message: data.message\n                };\n\n                if (cb) {\n                    return cb.call(null, err);\n                }\n            }\n\n            return data;\n        };\n\n        request.onerror = function() {\n            var err = {\n                status: statusCode.SERVER_ERROR,\n                message: request.statusText\n            };\n\n            if (cb) {\n                return cb.call(null, err);\n            }\n\n            return err;\n        };\n\n        return request.send();\n    };\n\n    if (callback && typeof callback === 'function') {\n        cb = callback;\n    }\n\n    self.auth.execute(teamName, exec);\n};\n\nproto.getMembers = function(teamName, channelId, limit, callback) {\n    var self = this;\n    var cb = null;\n\n    var exec = function(error) {\n        var request = new XMLHttpRequest();\n\n        if (error) {\n            if (cb) {\n                return cb.call(null, error);\n            }\n\n            return error;\n        }\n\n        var url = self.apiUri + '/api/v1/channels/' + channelId + '/members';\n        if (limit && limit > 0) {\n            url = url + '/' + limit.toString();\n        }\n\n        request.open('GET', url, true);\n        request.setRequestHeader('Content-Type', 'application/json');\n        request.setRequestHeader('Authorization', 'Bearer:' + self.auth.getToken(teamName));\n\n        request.onerror = function() {\n            var err = {\n                status: statusCode.SERVER_ERROR,\n                message: request.statusText\n            };\n\n            if (cb) {\n                return cb.call(null, err);\n            }\n\n            return err;\n        };\n\n        request.onload = function() {\n            var err;\n            var data = JSON.parse(request.responseText);\n\n            if (request.status === statusCode.OK || request.status === statusCode.NOT_MODIFIED) {\n                if (cb) {\n                    return cb.call(null, null, data);\n                }\n            } else {\n                err = {\n                    status: request.status,\n                    message: data.message\n                };\n\n                if (cb) {\n                    return cb.call(null, err);\n                }\n            }\n\n            return data;\n        };\n\n        return request.send();\n    };\n\n    if (callback && typeof callback === 'function') {\n        cb = callback;\n    }\n\n    return self.auth.execute(teamName, exec);\n};\n\nmodule.exports = function(uri) {\n    if (instance) {\n        return instance;\n    }\n\n    if (!uri) {\n        throw new Error('API uri must be set');\n    }\n\n    instance = new Channels(uri);\n    return instance;\n};\n","/**\n * Created by enahum on 3/1/16.\n */\nvar auth = require('./auth');\nvar channels = require('./channels');\nvar messages = require('./messages');\nvar users = require('./users');\n\nfunction resolve(url) {\n    var resolver = document.createElement('a');\n    resolver.href = url;\n    return resolver.origin;\n}\n\nfunction Api() {\n}\n\nvar proto = Api.prototype;\n\nproto.initialize = function(opts) {\n    if (!opts) {\n        throw new Error('options need to be set');\n    } else if (!opts.client_id) {\n        throw new Error('options must include client_id');\n    } else if (!opts.client_secret) {\n        throw new Error('options must include client_secret');\n    } else if (!opts.icon_url) {\n        throw new Error('options must include icon_url');\n    } else if (!opts.username) {\n        throw new Error('options must include username');\n    }\n\n    this.apiUri = resolve(opts.url || 'https://zboxnow.com/');\n    opts.url = this.apiUri;\n\n    auth(this.apiUri, {client_id: opts.client_id, client_secret: opts.client_secret});\n\n    this.channels = channels(this.apiUri);\n    this.users = users(this.apiUri);\n    this.messages = messages(opts);\n};\n\nwindow.zbox = (function() {\n    'use strict';\n    return new Api();\n}());\n","/**\n * Created by enahum on 3/2/16.\n */\nvar auth = require('./auth');\nvar statusCode = require('./status_code');\n\nvar MAX_LENGTH = 4000;\nvar instance = null;\n\nfunction Messages(opts) {\n    this.apiUri = opts.url;\n    this.iconUrl = opts.icon_url;\n    this.username = opts.username;\n    this.auth = auth();\n}\n\nvar proto = Messages.prototype;\n\nproto.prepare = function(message) {\n    var self = this;\n    return {\n        text: message,\n        username: self.username,\n        icon_url: self.iconUrl\n    };\n};\n\nproto.send = function(token, channelName, message, callback) {\n    var self = this;\n    var channel = channelName || 'town-square';\n    var request = new XMLHttpRequest();\n    var payload;\n    var cb;\n\n    if (callback && typeof callback === 'function') {\n        cb = callback;\n    }\n\n    if (!message) {\n        if (cb) {\n            cb.call(null, {status: statusCode.BAD_REQUEST, message: 'No text specified'});\n        }\n        return;\n    } else if (message.length > MAX_LENGTH) {\n        if (cb) {\n            cb.call(null, {status: statusCode.BAD_REQUEST, message: 'Message cannot be longer than ' + MAX_LENGTH + ' characters'});\n        }\n        return;\n    }\n\n    payload = {\n        text: message,\n        channel: channel,\n        username: self.username,\n        icon_url: self.iconUrl\n    };\n\n    request.open('POST', self.apiUri + '/hooks/' + token, true);\n    request.setRequestHeader('Content-Type', 'application/json');\n\n    request.onerror = function() {\n        var err = {\n            status: statusCode.SERVER_ERROR,\n            message: request.statusText\n        };\n\n        if (cb) {\n            return cb.call(null, err);\n        }\n\n        return err;\n    };\n\n    request.onload = function() {\n        var err;\n        var data = request.responseText;\n\n        if (request.status === statusCode.OK || request.status === statusCode.NOT_MODIFIED) {\n            if (cb) {\n                return cb.call(null, null);\n            }\n        } else {\n            err = {\n                status: request.status,\n                message: data.message\n            };\n\n            if (cb) {\n                return cb.call(null, err);\n            }\n        }\n\n        return data;\n    };\n\n    request.send(JSON.stringify(payload));\n};\n\nproto.sendEphemeral = function(token, channelName, userId, message, callback) {\n    var self = this;\n    var channel = channelName || 'town-square';\n    var request = new XMLHttpRequest();\n    var payload;\n    var cb;\n\n    if (callback && typeof callback === 'function') {\n        cb = callback;\n    }\n\n    if (!message) {\n        if (cb) {\n            cb.call(null, {status: statusCode.BAD_REQUEST, message: 'No text specified'});\n        }\n        return;\n    } else if (message.length > MAX_LENGTH) {\n        if (cb) {\n            cb.call(null, {status: statusCode.BAD_REQUEST, message: 'Message cannot be longer than ' + MAX_LENGTH + ' characters'});\n        }\n        return;\n    }\n\n    payload = {\n        text: message,\n        channel: channel,\n        username: self.username,\n        icon_url: self.iconUrl\n    };\n\n    request.open('POST', self.apiUri + '/ephemeral/' + token + '/' + userId, true);\n    request.setRequestHeader('Content-Type', 'application/json');\n\n    request.onerror = function() {\n        var err = {\n            status: statusCode.SERVER_ERROR,\n            message: request.statusText\n        };\n\n        if (cb) {\n            return cb.call(null, err);\n        }\n\n        return err;\n    };\n\n    request.onload = function() {\n        var err;\n        var data = request.responseText;\n\n        if (request.status === statusCode.OK || request.status === statusCode.NOT_MODIFIED) {\n            if (cb) {\n                return cb.call(null, null);\n            }\n        } else {\n            err = {\n                status: request.status,\n                message: data.message\n            };\n\n            if (cb) {\n                return cb.call(null, err);\n            }\n        }\n\n        return data;\n    };\n\n    request.send(JSON.stringify(payload));\n};\n\nmodule.exports = function(opts) {\n    if (instance) {\n        return instance;\n    }\n\n    if (!opts) {\n        throw new Error('options need to be set');\n    } else if (!opts.url) {\n        throw new Error('options url must be set');\n    } else if (!opts.icon_url) {\n        throw new Error('options must include icon_url');\n    } else if (!opts.username) {\n        throw new Error('options must include username');\n    }\n\n    instance = new Messages(opts);\n    return instance;\n};\n","/**\n * Created by enahum on 3/1/16.\n */\n\nvar statusCode = {\n    OK: 200,\n    NOT_MODIFIED: 304,\n    BAD_REQUEST: 400,\n    SERVER_ERROR: 500\n};\n\nmodule.exports = statusCode;\n","/**\n * Created by enahum on 3/1/16.\n */\nvar auth = require('./auth');\nvar statusCode = require('./status_code');\n\nvar instance = null;\n\nfunction Users(uri) {\n    this.apiUri = uri;\n    this.auth = auth();\n}\n\nvar proto = Users.prototype;\n\nproto.getAll = function(teamName, callback) {\n    var self = this;\n    var cb = null;\n\n    var exec = function(error) {\n        var request = new XMLHttpRequest();\n\n        if (error) {\n            if (cb) {\n                return cb.call(null, error);\n            }\n\n            return error;\n        }\n\n        request.open('GET', self.apiUri + '/api/v1/users/profiles', true);\n        request.setRequestHeader('Content-Type', 'application/json');\n        request.setRequestHeader('Authorization', 'Bearer:' + self.auth.getToken(teamName));\n        request.setRequestHeader('Accept', 'application/json');\n\n        request.onerror = function() {\n            var err = {\n                status: statusCode.SERVER_ERROR,\n                message: request.statusText\n            };\n\n            if (cb) {\n                return cb.call(null, err);\n            }\n\n            return err;\n        };\n\n        request.onload = function() {\n            var err;\n            var users;\n            var data = JSON.parse(request.responseText);\n\n            if (request.status === statusCode.OK || request.status === statusCode.NOT_MODIFIED) {\n                users = Object.keys(data).map(function(key) {\n                    var user = data[key];\n                    return {\n                        id: key,\n                        username: user.username,\n                        email: user.email,\n                        nickname: user.nickname,\n                        first_name: user.first_name,\n                        last_name: user.last_name,\n                        locale: user.locale,\n                        roles: user.roles\n                    };\n                }).\n                filter(function(user) {\n                    var roles = user.roles;\n                    delete user.roles;\n                    return (user.username !== 'systembot' && roles !== 'guest');\n                });\n\n                if (cb) {\n                    return cb.call(null, null, users);\n                }\n            } else {\n                err = {\n                    status: request.status,\n                    message: data.message\n                };\n\n                if (cb) {\n                    return cb.call(null, err);\n                }\n            }\n\n            return data;\n        };\n\n        return request.send();\n    };\n\n    if (callback && typeof callback === 'function') {\n        cb = callback;\n    }\n\n    self.auth.execute(teamName, exec);\n};\n\nproto.getStatuses = function(teamName, usersIds, callback) {\n    var self = this;\n    var cb = null;\n\n    var exec = function(error) {\n        var request = new XMLHttpRequest();\n\n        if (error) {\n            if (cb) {\n                return cb.call(null, error);\n            }\n\n            return error;\n        }\n\n        request.open('POST', self.apiUri + '/api/v1/users/status', true);\n        request.setRequestHeader('Content-Type', 'application/json');\n        request.setRequestHeader('Authorization', 'Bearer:' + self.auth.getToken(teamName));\n        request.setRequestHeader('Accept', 'application/json');\n\n        request.onerror = function() {\n            var err = {\n                status: statusCode.SERVER_ERROR,\n                message: request.statusText\n            };\n\n            if (cb) {\n                return cb.call(null, err);\n            }\n\n            return err;\n        };\n\n        request.onload = function() {\n            var err;\n            var data = JSON.parse(request.responseText);\n\n            if (request.status === statusCode.OK || request.status === statusCode.NOT_MODIFIED) {\n                if (cb) {\n                    return cb.call(null, null, data);\n                }\n            } else {\n                err = {\n                    status: request.status,\n                    message: data.message\n                };\n\n                if (cb) {\n                    return cb.call(null, err);\n                }\n            }\n\n            return data;\n        };\n\n        return request.send(JSON.stringify(usersIds));\n    };\n\n    if (callback && typeof callback === 'function') {\n        cb = callback;\n    }\n\n    if (!Array.isArray(usersIds)) {\n        var arrError = {\n            status: statusCode.BAD_REQUEST,\n            message: 'usersIds must be an array'\n        };\n        return cb.call(null, arrError);\n    }\n\n    return self.auth.execute(teamName, exec);\n};\n\nmodule.exports = function(uri) {\n    if (instance) {\n        return instance;\n    }\n\n    if (!uri) {\n        throw new Error('API uri must be set');\n    }\n\n    instance = new Users(uri);\n    return instance;\n};\n","/**\n * Created by enahum on 3/1/16.\n */\n\nvar utils = {};\n\nutils.serializeObject = function(obj) {\n    var query = '';\n    for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            query += encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]) + '&';\n        }\n    }\n    return query.slice(0, -1);\n};\n\nmodule.exports = utils;\n"]}